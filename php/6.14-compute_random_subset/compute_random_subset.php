<?php

require_once '../bootstrap.php';

use EOPI\Helper\InputHelper;

/**
 * The time complexity is O(k) where k is the $subsetSize and the storage complexity is O(k) where k is the $subsetSize.
 * If the random value and the $maximum - 1 - $i value are not found in the $hashMap at each iteration, the $hashMap
 * becomes 2 * $subsetSize in length.  $subset will always be $subsetSize in length.  The hidden leading coefficient of
 * k for storage is 3.
 */

/**
 * Compute a random subset of unique integers in the range [0 - $maximum] of the specified size.  This works by doing
 * $subsetSize iterations and at each iteration choosing a random value from 0 - ($maximum - 1 - $i).  Initially each
 * value in the hash map matches the index it is at.  As collisions happen, the value at random and ($maximum - 1 - $i)
 * are swapped.  This ensures that each value in the return subset is unique.  After all iterations the return subset is
 * generated by iterating from ($maximum - 1 - 0) through ($maximum - 1 - $subsetSize - 1) and storing the value at that
 * index in the hash map at the end of the subset.
 *
 * i.e.
 * If the $maximum is 100 and $subsetSize is 5
 *
 * $hashMap = []
 *
 * <<< FOR LOOP BEGIN >>>
 *
 * Iteration 1:
 * $i = 0
 * $random = random number between 0 and $maximum - 1 - $i(0) inclusive.  It picks 54
 * Are $hashMap[54] or $hashMap[99] set? No
 * $hashMap = [
 *      54 => 99,
 *      99 => 54
 * ]
 *
 * Iteration 2:
 * $i = 1
 * $random = random number between 0 and $maximum - 1 - $i(1) inclusive.  It picks 27
 * Are $hashMap[27] or $hashMap[98] set? No
 * $hashMap = [
 *      27 => 98,
 *      54 => 99,
 *      98 => 27,
 *      99 => 54
 * ]
 *
 * Iteration 3:
 * $i = 2
 * $random = random number between 0 and $maximum - 1 - $i(2) inclusive.  It picks 36
 * Are $hashMap[36] or $hashMap[97] set? No
 * $hashMap = [
 *      27 => 98,
 *      36 => 97,
 *      54 => 99,
 *      97 => 36,
 *      98 => 27,
 *      99 => 54
 * ]
 *
 * Iteration 4:
 * $i = 3
 * $random = random number between 0 and $maximum - 1 - $i(3) inclusive.  It picks 27
 * Are $hashMap[27] or $hashMap[96] set? Yes, $hashMap[27] is
 * $hashMap = [
 *      27 => 96,
 *      36 => 97,
 *      54 => 99,
 *      96 => 98,
 *      97 => 36,
 *      98 => 27,
 *      99 => 54
 * ]
 *
 * Iteration 5:
 * $i = 4
 * $random = random number between 0 and $maximum - 1 - $i(4) inclusive.  It picks 1
 * Are $hashMap[1] or $hashMap[95] set? No
 * $hashMap = [
 *      1 => 95,
 *      27 => 96,
 *      36 => 97,
 *      54 => 99,
 *      95 => 1,
 *      96 => 98,
 *      97 => 36,
 *      98 => 27,
 *      99 => 54
 * ]
 *
 * <<< FOR LOOP TERMINATION: $i = $subsetSize - 1 >>>
 *
 * $subset = []
 *
 * <<< FOR LOOP BEGIN >>>
 *
 * Iteration 1:
 * $j = 0
 * $subset = [54]
 *
 * Iteration 2:
 * $j = 1
 * $subset = [54, 27]
 *
 * Iteration 3:
 * $j = 2
 * $subset = [54, 27, 36]
 *
 * Iteration 4:
 * $j = 3
 * $subset = [54, 27, 36, 98]
 *
 * Iteration 5:
 * $j = 4
 * $subset = [54, 27, 36, 98, 1]
 *
 * <<< FOR LOOP TERMINATION: $j = $subsetSize - 1 >>>
 *
 * return [54, 27, 36, 98, 1]
 *
 * @param int $maximum
 * @param int $subsetSize
 * @return array
 */
function computeRandomSubset($maximum, $subsetSize)
{
    if (!is_numeric($maximum) || $maximum < 0) {
        throw new \InvalidArgumentException('$maximum must be a positive integer');
    }

    if (!is_numeric($subsetSize) || $subsetSize < 0) {
        throw new \InvalidArgumentException('$subsetSize must be a positive integer');
    }

    if ($subsetSize >= $maximum - 1) {
        throw new \InvalidArgumentException('$subsetSize cannot be >= $maximum - 1');
    }

    $hashMap = [];

    for ($i = 0; $i < $subsetSize; $i++) {
        $random = mt_rand(0, $maximum - 1 - $i);

        if (!isset($hashMap[$random]) && !isset($hashMap[$maximum - 1 - $i])) {
            $hashMap[$random] = $maximum - 1 - $i;
            $hashMap[$maximum - 1 - $i] = $random;
        } elseif (!isset($hashMap[$random]) && isset($hashMap[$maximum - 1 - $i])) {
            $hashMap[$random] = $hashMap[$maximum - 1 - $i];
            $hashMap[$maximum - 1 - $i] = $random;
        } elseif (isset($hashMap[$random]) && !isset($hashMap[$maximum - 1 - $i])) {
            $hashMap[$maximum - 1 - $i] = $hashMap[$random];
            $hashMap[$random] = $maximum - 1 - $i;
        } else {
            $temp = $hashMap[$random];
            $hashMap[$random] = $hashMap[$maximum - 1 - $i];
            $hashMap[$maximum - 1 - $i] = $temp;
        }
    }

    $subset = [];

    for ($j = 0; $j < $subsetSize; $j++) {
        $subset[] = $hashMap[$maximum - 1 - $j];
    }

    return $subset;
}

$inputHelper = new InputHelper();
$maximum = $inputHelper->readInputFromStdIn('Enter the maximum number as a positive integer: ');
$subsetSize = $inputHelper->readInputFromStdIn('Enter the size of the subset to generate as a positive integer: ');
$result = computeRandomSubset($maximum, $subsetSize);

printf('A random subset of size %d using the set [0 - %d] is %s', $subsetSize, $maximum, json_encode($result));
print PHP_EOL;